import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "framelesswindow.h"
        name: "FramelessWindow"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["music_player_demo/FramelessWindow 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "MousePosition"
            values: [
                "NORMAL",
                "TOPLEFT",
                "TOP",
                "TOPRIGHT",
                "LEFT",
                "RIGHT",
                "BOTTOMLEFT",
                "BOTTOM",
                "BOTTOMRIGHT"
            ]
        }
        Property {
            name: "mouse_pos"
            type: "MousePosition"
            read: "getMouse_pos"
            write: "setMouse_pos"
            notify: "mouse_posChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "mouse_posChanged" }
    }
    Component {
        file: "musicplayer.h"
        name: "MusicPlayer"
        accessSemantics: "reference"
        prototype: "QMediaPlayer"
        exports: ["music_player_demo/MusicPlayer 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "isPaused"
            type: "bool"
            read: "getIsPaused"
            write: "setIsPaused"
            notify: "isPausedChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            notify: "metaDataChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "artist"
            type: "QString"
            read: "artist"
            notify: "metaDataChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "duration"
            type: "qlonglong"
            read: "duration"
            notify: "metaDataChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "coverImage"
            type: "QString"
            read: "coverImage"
            notify: "metaDataChanged"
            index: 4
            isReadonly: true
        }
        Signal { name: "isPausedChanged" }
        Signal { name: "metaDataChanged" }
        Method { name: "onInitializationDone" }
        Method { name: "m_play" }
        Method { name: "m_pause" }
        Method { name: "m_stop" }
        Method {
            name: "m_setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "getMetaData"; type: "QMediaMetaData" }
    }
    Component {
        file: "myutility.h"
        name: "MyUtility"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["music_player_demo/MyUtility 1.0"]
        exportMetaObjectRevisions: [256]
        Method {
            name: "showFiles"
            type: "QStringList"
            Parameter { name: "folder"; type: "QString" }
        }
    }
    Component {
        file: "qmediaplayer.h"
        name: "QMediaPlayer"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "PlaybackState"
            values: ["StoppedState", "PlayingState", "PausedState"]
        }
        Enum {
            name: "MediaStatus"
            values: [
                "NoMedia",
                "LoadingMedia",
                "LoadedMedia",
                "StalledMedia",
                "BufferingMedia",
                "BufferedMedia",
                "EndOfMedia",
                "InvalidMedia"
            ]
        }
        Enum {
            name: "Error"
            values: [
                "NoError",
                "ResourceError",
                "FormatError",
                "NetworkError",
                "AccessDeniedError"
            ]
        }
        Enum {
            name: "Loops"
            values: ["Infinite", "Once"]
        }
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "duration"
            type: "qlonglong"
            read: "duration"
            notify: "durationChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "position"
            type: "qlonglong"
            read: "position"
            write: "setPosition"
            notify: "positionChanged"
            index: 2
        }
        Property {
            name: "bufferProgress"
            type: "float"
            read: "bufferProgress"
            notify: "bufferProgressChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "hasAudio"
            type: "bool"
            read: "hasAudio"
            notify: "hasAudioChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "hasVideo"
            type: "bool"
            read: "hasVideo"
            notify: "hasVideoChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "seekable"
            type: "bool"
            read: "isSeekable"
            notify: "seekableChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "playing"
            type: "bool"
            read: "isPlaying"
            notify: "playingChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "playbackRate"
            type: "double"
            read: "playbackRate"
            write: "setPlaybackRate"
            notify: "playbackRateChanged"
            index: 8
        }
        Property {
            name: "loops"
            type: "int"
            read: "loops"
            write: "setLoops"
            notify: "loopsChanged"
            index: 9
        }
        Property {
            name: "playbackState"
            type: "PlaybackState"
            read: "playbackState"
            notify: "playbackStateChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "mediaStatus"
            type: "MediaStatus"
            read: "mediaStatus"
            notify: "mediaStatusChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "metaData"
            type: "QMediaMetaData"
            read: "metaData"
            notify: "metaDataChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "error"
            type: "Error"
            read: "error"
            notify: "errorChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "errorString"
            type: "QString"
            read: "errorString"
            notify: "errorChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "videoOutput"
            type: "QObject"
            isPointer: true
            read: "videoOutput"
            write: "setVideoOutput"
            notify: "videoOutputChanged"
            index: 15
        }
        Property {
            name: "audioOutput"
            type: "QAudioOutput"
            isPointer: true
            read: "audioOutput"
            write: "setAudioOutput"
            notify: "audioOutputChanged"
            index: 16
        }
        Property {
            name: "audioBufferOutput"
            type: "QAudioBufferOutput"
            isPointer: true
            read: "audioBufferOutput"
            write: "setAudioBufferOutput"
            notify: "audioBufferOutputChanged"
            index: 17
        }
        Property {
            name: "audioTracks"
            type: "QMediaMetaData"
            isList: true
            read: "audioTracks"
            notify: "tracksChanged"
            index: 18
            isReadonly: true
        }
        Property {
            name: "videoTracks"
            type: "QMediaMetaData"
            isList: true
            read: "videoTracks"
            notify: "tracksChanged"
            index: 19
            isReadonly: true
        }
        Property {
            name: "subtitleTracks"
            type: "QMediaMetaData"
            isList: true
            read: "subtitleTracks"
            notify: "tracksChanged"
            index: 20
            isReadonly: true
        }
        Property {
            name: "activeAudioTrack"
            type: "int"
            read: "activeAudioTrack"
            write: "setActiveAudioTrack"
            notify: "activeTracksChanged"
            index: 21
        }
        Property {
            name: "activeVideoTrack"
            type: "int"
            read: "activeVideoTrack"
            write: "setActiveVideoTrack"
            notify: "activeTracksChanged"
            index: 22
        }
        Property {
            name: "activeSubtitleTrack"
            type: "int"
            read: "activeSubtitleTrack"
            write: "setActiveSubtitleTrack"
            notify: "activeTracksChanged"
            index: 23
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "media"; type: "QUrl" }
        }
        Signal {
            name: "playbackStateChanged"
            Parameter { name: "newState"; type: "QMediaPlayer::PlaybackState" }
        }
        Signal {
            name: "mediaStatusChanged"
            Parameter { name: "status"; type: "QMediaPlayer::MediaStatus" }
        }
        Signal {
            name: "durationChanged"
            Parameter { name: "duration"; type: "qlonglong" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "hasAudioChanged"
            Parameter { name: "available"; type: "bool" }
        }
        Signal {
            name: "hasVideoChanged"
            Parameter { name: "videoAvailable"; type: "bool" }
        }
        Signal {
            name: "bufferProgressChanged"
            Parameter { name: "progress"; type: "float" }
        }
        Signal {
            name: "seekableChanged"
            Parameter { name: "seekable"; type: "bool" }
        }
        Signal {
            name: "playingChanged"
            Parameter { name: "playing"; type: "bool" }
        }
        Signal {
            name: "playbackRateChanged"
            Parameter { name: "rate"; type: "double" }
        }
        Signal { name: "loopsChanged" }
        Signal { name: "metaDataChanged" }
        Signal { name: "videoOutputChanged" }
        Signal { name: "audioOutputChanged" }
        Signal { name: "tracksChanged" }
        Signal { name: "activeTracksChanged" }
        Signal { name: "errorChanged" }
        Signal {
            name: "errorOccurred"
            Parameter { name: "error"; type: "QMediaPlayer::Error" }
            Parameter { name: "errorString"; type: "QString" }
        }
        Method { name: "play" }
        Method { name: "pause" }
        Method { name: "stop" }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "setPlaybackRate"
            Parameter { name: "rate"; type: "double" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSourceDevice"
            Parameter { name: "device"; type: "QIODevice"; isPointer: true }
            Parameter { name: "sourceUrl"; type: "QUrl" }
        }
        Method {
            name: "setSourceDevice"
            isCloned: true
            Parameter { name: "device"; type: "QIODevice"; isPointer: true }
        }
    }
}
